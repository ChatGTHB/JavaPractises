
Summary

Java `Set` sınıfları, benzersiz elemanları içeren bir koleksiyon türüdür.
`Set`ler, elemanların sırasını korumaz ve her eleman yalnızca bir kez bulunabilir.
Bu özellikleri nedeniyle `Set`ler, birçok farklı senaryoda kullanışlıdır.

Java'da `Set`ler, `HashSet`, `TreeSet` ve `LinkedHashSet` olmak üzere üç ana sınıfta bulunur.

 Bu sınıflar arasındaki farklar şu şekildedir:

1. **HashSet**:
    - Elemanları herhangi bir sırayla depolar ve en hızlı ekleme/silme işlemlerine sahiptir.
    - Elemanların sırası önemli değilse tercih edilir.
    - Hash tabanlı bir yapı kullandığı için `null` değerine izin verir.
    - Performans: Ortalama O(1) ekleme, silme ve arama işlemleri.

2. **TreeSet**:
    - Elemanları doğal bir sıraya göre veya sağlanan bir `Comparator` ile sıralı olarak depolar.
    - Elemanların sıralı olması gerektiği durumlarda kullanılır.
    - `NavigableSet` ve `SortedSet` arayüzlerini uygular.
    - Performans: Ortalama O(log n) ekleme, silme ve arama işlemleri.
    - `null` değerine izin vermez.

3. **LinkedHashSet**:
    - Elemanları eklendiği sıraya göre depolar.
    - Elemanların sırasının korunması gerektiği durumlarda kullanılır.
    - `HashSet`e göre ekleme/silme işlemleri biraz daha yavaştır, ancak `TreeSet`e göre daha hızlıdır.
    - Performans: Ortalama O(1) ekleme, silme ve arama işlemleri.

`Set`ler, `add()` metoduyla eleman eklenerek doldurulur.
Elemanlar, `remove()` metoduyla silinebilir.
Ayrıca, `contains()` metoduyla bir elemanın `Set` içinde olup olmadığı kontrol edilebilir.

`Set`ler, diğer `Set`lerle birleştirilebilir, kesiştirilebilir veya farkları alınabilir.
Bir `Set`in başka bir `Set` ile birleştirilmesi `addAll()` metodu kullanılarak yapılır.
Kesişim işlemi `retainAll()` metodu ile yapılırken, fark işlemi `removeAll()` metodu ile yapılır.

`Set`ler genellikle `for-each` döngüsüyle veya `iterator()` metodu kullanılarak elemanları üzerinde gezinilir.
