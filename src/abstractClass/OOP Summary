
Java'da OOP, sınıfların ve nesnelerin kullanıldığı
bir programlama paradigmadır.
OOP, programları daha organize, esnek ve sürdürülebilir hale getirir.
Java'da OOP'nin temel kavramları:

Sınıflar (Classes):
Sınıflar, nesnelerin özelliklerini ve
davranışlarını tanımlayan şablonlardır.
Bir sınıf, değişkenler (özellikler) ve
fonksiyonlar (metotlar) içerir.
Nesneler, sınıflardan türetilir ve
sınıfın özelliklerini ve davranışlarını miras alır.

Kalıtım (Inheritance):
Kalıtım, bir sınıfın özelliklerini
ve davranışlarını başka bir sınıfa aktarmak için kullanılır.
Java'da bir sınıf, yalnızca bir sınıftan kalıtım alabilir,
ancak çoklu kalıtım yerine arayüzler (interfaces) kullanılabilir.

Polimorfizm (Polymorphism):
Polimorfizm, aynı isimli ancak farklı parametrelerle
çalışabilen fonksiyonların kullanılmasını sağlar.
Java'da polimorfizm, method overriding
ve method overloading ile gerçekleştirilir.

Kapsülleme (Encapsulation):
Kapsülleme, sınıfların özelliklerine ve
davranışlarına erişimi sınırlamak için kullanılır.
Java'da kapsülleme, private, public, protected gibi
erişim belirleyicileriyle ve getter/setter metodlarıyla sağlanır.

Soyut Sınıflar (Abstract Classes):
Soyut sınıflar, tamamlanmamış veya
uygulanması gereken metodları içeren sınıflardır.
Soyut sınıflar, "abstract" anahtar kelimesiyle tanımlanır
ve diğer sınıflar tarafından genişletilebilir.

Arayüzler (Interfaces):
Arayüzler, bir sınıfın belirli bir davranışı uygulamasını zorlar.
Arayüzler, sınıflar arasında bir sözleşme sağlar
ve çoklu kalıtımı destekler.

Java'da OOP kullanarak, kodunuzu daha modüler,
yeniden kullanılabilir ve daha kolay anlaşılır hale getirebilirsiniz.
OOP, büyük ölçekli projelerde özellikle faydalıdır
ve kodunuzun daha iyi organize edilmesini sağlar.